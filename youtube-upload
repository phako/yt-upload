#!/usr/bin/python3

import http.client
import httplib2
import os
import random
import sys
import time
import json
import progressbar as pb
from datetime import datetime,timedelta
import dateutil.tz
import parsedatetime as pdt

from apiclient.discovery import build
from apiclient.errors import HttpError
from apiclient.http import MediaFileUpload
from oauth2client.client import flow_from_clientsecrets
from oauth2client.file import Storage
from oauth2client.tools import argparser, run_flow


# Explicitly tell the underlying HTTP transport library not to retry, since
# we are handling retry logic ourselves.
httplib2.RETRIES = 1

# Maximum number of times to retry before giving up.
MAX_RETRIES = 10

# Always retry when these exceptions are raised.
RETRIABLE_EXCEPTIONS = (httplib2.HttpLib2Error, IOError, http.client.NotConnected,
  http.client.IncompleteRead, http.client.ImproperConnectionState,
  http.client.CannotSendRequest, http.client.CannotSendHeader,
  http.client.ResponseNotReady, http.client.BadStatusLine)

# Always retry when an apiclient.errors.HttpError with one of these status
# codes is raised.
RETRIABLE_STATUS_CODES = [500, 502, 503, 504]

# The CLIENT_SECRETS_FILE variable specifies the name of a file that contains
# the OAuth 2.0 information for this application, including its client_id and
# client_secret. You can acquire an OAuth 2.0 client ID and client secret from
# the {{ Google Cloud Console }} at
# {{ https://cloud.google.com/console }}.
# Please ensure that you have enabled the YouTube Data API for your project.
# For more information about using OAuth2 to access the YouTube Data API, see:
#   https://developers.google.com/youtube/v3/guides/authentication
# For more information about the client_secrets.json file format, see:
#   https://developers.google.com/api-client-library/python/guide/aaa_client_secrets
CLIENT_SECRETS_FILE = "client_secrets.json"

# This OAuth 2.0 access scope allows an application to upload files to the
# authenticated user's YouTube channel, but doesn't allow other types of access.
YOUTUBE_UPLOAD_SCOPE = "https://www.googleapis.com/auth/youtube.upload"
YOUTUBE_API_SERVICE_NAME = "youtube"
YOUTUBE_API_VERSION = "v3"

# This variable defines a message to display if the CLIENT_SECRETS_FILE is
# missing.
MISSING_CLIENT_SECRETS_MESSAGE = """
WARNING: Please configure OAuth 2.0

To make this sample run you will need to populate the client_secrets.json file
found at:

   %s

with information from the {{ Cloud Console }}
{{ https://cloud.google.com/console }}

For more information about the client_secrets.json file format, please visit:
https://developers.google.com/api-client-library/python/guide/aaa_client_secrets
""" % os.path.abspath(os.path.join(os.path.dirname(__file__),
                                   CLIENT_SECRETS_FILE))

VALID_PRIVACY_STATUSES = ("public", "private", "unlisted")


def get_authenticated_service(args):
  flow = flow_from_clientsecrets(CLIENT_SECRETS_FILE,
    scope=YOUTUBE_UPLOAD_SCOPE,
    message=MISSING_CLIENT_SECRETS_MESSAGE)

  storage = Storage("%s-oauth2.json" % sys.argv[0])
  credentials = storage.get()

  if credentials is None or credentials.invalid:
    credentials = run_flow(flow, storage, args)

  return build(YOUTUBE_API_SERVICE_NAME, YOUTUBE_API_VERSION,
    http=credentials.authorize(httplib2.Http()))

def initialize_upload(file_name, youtube, options):

  body = dict()

  # Load initial data from template if available
  if options.template:
    try:
      with open(options.template, 'r') as f:
        body = json.load(f)
    except IOError as e:
      print(("Could not open template file %s, ignoring argument" % options.template))

  # Fill with overrides from commandline
  if "snippet" not in body:
    body["snippet"] = dict()

  snippet = body["snippet"]
  if options.title:
    snippet["title"] = options.title

  # if there was no title given, derive one from the filename
  if "title" not in snippet:
    snippet["title"] = os.path.splitext(os.path.basename(file_name))[0]

  # Current title is a template that expects the generated filename
  if "%s" in snippet["title"]:
    name = os.path.splitext(os.path.basename(file_name))[0]
    snippet["title"] = (snippet["title"] % name)

  if options.description:
    snippet["description"] = options.description

  if options.keywords:
    snippet["tags"] = options.keywords.split(",")

  if options.recordedAt:
    body["recordingDetails"] = dict(recordingDate = options.recordedAt)

  status = dict()
  if options.publishAt:
    status = dict(
      privacyStatus = "private",
      publishAt = options.publishAt
    )
  else:
    status = dict(
      privacyStatus = options.privacyStatus
    )
  body["status"] = status

  if args.dry_run:
    print(body)
    return

  media_body=MediaFileUpload(file_name, resumable=True)
  # Call the API's videos.insert method to create and upload the video.
  insert_request = youtube.videos().insert(
    part=",".join(list(body.keys())),
    body=body,
    # The chunksize parameter specifies the size of each chunk of data, in
    # bytes, that will be uploaded at a time. Set a higher value for
    # reliable connections as fewer chunks lead to faster uploads. Set a lower
    # value for better recovery on less reliable connections.
    #
    # Setting "chunksize" equal to -1 in the code below means that the entire
    # file will be uploaded in a single HTTP request. (If the upload fails,
    # it will still be retried where it left off.) This is usually a best
    # practice, but if you're using Python older than 2.6 or if you're
    # running on App Engine, you should set the chunksize to something like
    # 1024 * 1024 (1 megabyte).
    media_body = media_body
  )

  print("Uploading file %s..." % file_name)
  resumable_upload(insert_request, media_body)

# This method implements an exponential backoff strategy to resume a
# failed upload.
def resumable_upload(insert_request, media_body):
  response = None
  error = None
  retry = 0
  widgets = [pb.FileTransferSpeed(), " ", pb.Bar(), " ", pb.Percentage(), " ", pb.ETA()]
  bar = pb.ProgressBar(widgets = widgets, maxval = media_body.size())
  bar.start()
  while response is None:
    try:
      status, response = insert_request.next_chunk()
      if response is not None:
        if 'id' in response:
          print("Video id '%s' was successfully uploaded." % response['id'])
        else:
          exit("The upload failed with an unexpected response: %s" % response)
      if status:
        bar.update(status.resumable_progress)
    except HttpError as e:
      if e.resp.status in RETRIABLE_STATUS_CODES:
        error = "A retriable HTTP error %d occurred:\n%s" % (e.resp.status,
                                                             e.content)
      else:
        raise
    except RETRIABLE_EXCEPTIONS as e:
      error = "A retriable error occurred: %s" % e

    if error is not None:
      print(error)
      retry += 1
      if retry > MAX_RETRIES:
        exit("No longer attempting to retry.")

      max_sleep = 2 ** retry
      sleep_seconds = random.random() * max_sleep
      print("Sleeping %f seconds and then retrying..." % sleep_seconds)
      time.sleep(sleep_seconds)
  bar.finish()

if __name__ == '__main__':
  argparser.add_argument("--file", required=True, action='append', help="Video file to upload")
  argparser.add_argument("--title", help="Video title")
  argparser.add_argument("--description", help="Video description")
  argparser.add_argument("--category", default="22",
    help="Numeric video category. " +
      "See https://developers.google.com/youtube/v3/docs/videoCategories/list")
  argparser.add_argument("--keywords", help="Video keywords, comma separated",
    default="")
  argparser.add_argument("--privacyStatus", choices=VALID_PRIVACY_STATUSES,
    default=VALID_PRIVACY_STATUSES[0], help="Video privacy status.")
  argparser.add_argument("--publishAt", help="Publishing date (ISO-8601)")
  argparser.add_argument("--recordedAt", help="Recording time of video (ISO-8601)")
  argparser.add_argument("--template", help="Meta-data template file using JSON")
  argparser.add_argument("--dry-run", action='store_true', default=False, help="Do not upload, dump meta-data only")
  args = argparser.parse_args()

  files = [f for f in args.file if os.path.exists(f)]

  if len(files) == 0:
    exit("Please specify a valid file using the --file= parameter.")



  if args.publishAt:
    dt, result= pdt.Calendar().parseDT(args.publishAt, tzinfo = dateutil.tz.tzlocal())
    if result == 0:
      exit(("Not a valid date: %s" % args.publishAt))
    # word-around to add the millisecond part to datetime, otherwise API does not
    # accept the time
    dt = dt + timedelta(milliseconds = 1)
    args.publishAt = dt.isoformat()
  youtube = get_authenticated_service(args)
  for f in files:
    try:
      initialize_upload(f, youtube, args)
    except HttpError as e:
      print("An HTTP error %d occurred:\n%s" % (e.resp.status, e.content))
